; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\pdma.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\pdma.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DENABLE_SPI_SLAVE --omf_browse=.\obj\pdma.crf ..\..\..\Library\StdDriver\src\pdma.c]
                          THUMB

                          AREA ||i.PDMA_Close||, CODE, READONLY, ALIGN=1

                  PDMA_Close PROC
;;;62      */
;;;63     void PDMA_Close(PDMA_T * pdma)
000000  2100              MOVS     r1,#0
;;;64     {
;;;65         pdma->CHCTL = 0UL;
000002  f8c01400          STR      r1,[r0,#0x400]
;;;66     }
000006  4770              BX       lr
;;;67     
                          ENDP


                          AREA ||i.PDMA_DisableInt||, CODE, READONLY, ALIGN=1

                  PDMA_DisableInt PROC
;;;461     */
;;;462    void PDMA_DisableInt(PDMA_T * pdma,uint32_t u32Ch, uint32_t u32Mask)
000000  2301              MOVS     r3,#1
;;;463    {
;;;464        switch(u32Mask)
;;;465        {
;;;466        case PDMA_INT_TRANS_DONE:
;;;467            pdma->INTEN &= ~(1ul << u32Ch);
000002  408b              LSLS     r3,r3,r1
000004  b14a              CBZ      r2,|L2.26|
000006  2a01              CMP      r2,#1                 ;464
000008  d00d              BEQ      |L2.38|
00000a  2a02              CMP      r2,#2                 ;464
00000c  d104              BNE      |L2.24|
;;;468            break;
;;;469        case PDMA_INT_TEMPTY:
;;;470            pdma->DSCT[u32Ch].CTL |= PDMA_DSCT_CTL_TBINTDIS_Msk;
;;;471            break;
;;;472        case PDMA_INT_TIMEOUT:
;;;473            pdma->TOUTIEN &= ~(1ul << u32Ch);
00000e  f8d01438          LDR      r1,[r0,#0x438]
000012  4399              BICS     r1,r1,r3
000014  f8c01438          STR      r1,[r0,#0x438]
                  |L2.24|
;;;474            break;
;;;475    
;;;476        default:
;;;477            break;
;;;478        }
;;;479    }
000018  4770              BX       lr
                  |L2.26|
00001a  f8d01418          LDR      r1,[r0,#0x418]        ;467
00001e  4399              BICS     r1,r1,r3              ;467
000020  f8c01418          STR      r1,[r0,#0x418]        ;467
000024  4770              BX       lr
                  |L2.38|
000026  eb001001          ADD      r0,r0,r1,LSL #4       ;470
00002a  6801              LDR      r1,[r0,#0]            ;470
00002c  f0410180          ORR      r1,r1,#0x80           ;470
000030  6001              STR      r1,[r0,#0]            ;470
000032  4770              BX       lr
;;;480    
                          ENDP


                          AREA ||i.PDMA_DisableTimeout||, CODE, READONLY, ALIGN=1

                  PDMA_DisableTimeout PROC
;;;357     */
;;;358    void PDMA_DisableTimeout(PDMA_T * pdma,uint32_t u32Mask)
000000  f8d02434          LDR      r2,[r0,#0x434]
;;;359    {
;;;360        pdma->TOUTEN &= ~u32Mask;
000004  438a              BICS     r2,r2,r1
000006  f8c02434          STR      r2,[r0,#0x434]
;;;361    }
00000a  4770              BX       lr
;;;362    
                          ENDP


                          AREA ||i.PDMA_EnableInt||, CODE, READONLY, ALIGN=1

                  PDMA_EnableInt PROC
;;;428     */
;;;429    void PDMA_EnableInt(PDMA_T * pdma,uint32_t u32Ch, uint32_t u32Mask)
000000  2301              MOVS     r3,#1
;;;430    {
;;;431        switch(u32Mask)
;;;432        {
;;;433        case PDMA_INT_TRANS_DONE:
;;;434            pdma->INTEN |= (1ul << u32Ch);
000002  408b              LSLS     r3,r3,r1
000004  b14a              CBZ      r2,|L4.26|
000006  2a01              CMP      r2,#1                 ;431
000008  d00d              BEQ      |L4.38|
00000a  2a02              CMP      r2,#2                 ;431
00000c  d104              BNE      |L4.24|
;;;435            break;
;;;436        case PDMA_INT_TEMPTY:
;;;437            pdma->DSCT[u32Ch].CTL &= ~PDMA_DSCT_CTL_TBINTDIS_Msk;
;;;438            break;
;;;439        case PDMA_INT_TIMEOUT:
;;;440            pdma->TOUTIEN |= (1ul << u32Ch);
00000e  f8d01438          LDR      r1,[r0,#0x438]
000012  4319              ORRS     r1,r1,r3
000014  f8c01438          STR      r1,[r0,#0x438]
                  |L4.24|
;;;441            break;
;;;442    
;;;443        default:
;;;444            break;
;;;445        }
;;;446    }
000018  4770              BX       lr
                  |L4.26|
00001a  f8d01418          LDR      r1,[r0,#0x418]        ;434
00001e  4319              ORRS     r1,r1,r3              ;434
000020  f8c01418          STR      r1,[r0,#0x418]        ;434
000024  4770              BX       lr
                  |L4.38|
000026  eb001001          ADD      r0,r0,r1,LSL #4       ;437
00002a  6801              LDR      r1,[r0,#0]            ;437
00002c  f0210180          BIC      r1,r1,#0x80           ;437
000030  6001              STR      r1,[r0,#0]            ;437
000032  4770              BX       lr
;;;447    
                          ENDP


                          AREA ||i.PDMA_EnableTimeout||, CODE, READONLY, ALIGN=1

                  PDMA_EnableTimeout PROC
;;;341     */
;;;342    void PDMA_EnableTimeout(PDMA_T * pdma,uint32_t u32Mask)
000000  f8d02434          LDR      r2,[r0,#0x434]
;;;343    {
;;;344        pdma->TOUTEN |= u32Mask;
000004  430a              ORRS     r2,r2,r1
000006  f8c02434          STR      r2,[r0,#0x434]
;;;345    }
00000a  4770              BX       lr
;;;346    
                          ENDP


                          AREA ||i.PDMA_Open||, CODE, READONLY, ALIGN=2

                  PDMA_Open PROC
;;;37      */
;;;38     void PDMA_Open(PDMA_T * pdma,uint32_t u32Mask)
000000  b570              PUSH     {r4-r6,lr}
;;;39     {
;;;40         uint32_t i;
;;;41     
;;;42         for (i=0UL; i<PDMA_CH_MAX; i++)
000002  2200              MOVS     r2,#0
;;;43         {
;;;44             if((1 << i) & u32Mask)
;;;45             {
;;;46                 pdma->DSCT[i].CTL = 0UL;
;;;47                 u32ChSelect[i] = PDMA_MEM;
000004  4d09              LDR      r5,|L6.44|
000006  2601              MOVS     r6,#1                 ;44
000008  4613              MOV      r3,r2                 ;44
                  |L6.10|
00000a  fa06f402          LSL      r4,r6,r2              ;44
00000e  420c              TST      r4,r1                 ;44
000010  d003              BEQ      |L6.26|
000012  eb001402          ADD      r4,r0,r2,LSL #4       ;46
000016  6023              STR      r3,[r4,#0]            ;46
000018  54ab              STRB     r3,[r5,r2]
                  |L6.26|
00001a  1c52              ADDS     r2,r2,#1
00001c  2a10              CMP      r2,#0x10              ;42
00001e  d3f4              BCC      |L6.10|
;;;48             }
;;;49         }
;;;50     
;;;51         pdma->CHCTL |= u32Mask;
000020  f8d02400          LDR      r2,[r0,#0x400]
000024  430a              ORRS     r2,r2,r1
000026  f8c02400          STR      r2,[r0,#0x400]
;;;52     }
00002a  bd70              POP      {r4-r6,pc}
;;;53     
                          ENDP

                  |L6.44|
                          DCD      ||.bss||

                          AREA ||i.PDMA_SetBurstType||, CODE, READONLY, ALIGN=1

                  PDMA_SetBurstType PROC
;;;324     */
;;;325    void PDMA_SetBurstType(PDMA_T * pdma,uint32_t u32Ch, uint32_t u32BurstType, uint32_t u32BurstSize)
000000  eb001001          ADD      r0,r0,r1,LSL #4
;;;326    {
;;;327        pdma->DSCT[u32Ch].CTL &= ~(PDMA_DSCT_CTL_TXTYPE_Msk | PDMA_DSCT_CTL_BURSIZE_Msk);
000004  6801              LDR      r1,[r0,#0]
000006  f0210174          BIC      r1,r1,#0x74
00000a  6001              STR      r1,[r0,#0]
;;;328        pdma->DSCT[u32Ch].CTL |= (u32BurstType | u32BurstSize);
00000c  6801              LDR      r1,[r0,#0]
00000e  431a              ORRS     r2,r2,r3
000010  4311              ORRS     r1,r1,r2
000012  6001              STR      r1,[r0,#0]
;;;329    }
000014  4770              BX       lr
;;;330    
                          ENDP


                          AREA ||i.PDMA_SetRepeat||, CODE, READONLY, ALIGN=1

                  PDMA_SetRepeat PROC
;;;121     */
;;;122    void PDMA_SetRepeat(PDMA_T * pdma,uint32_t u32Ch, uint32_t u32DestInterval, uint32_t u32SrcInterval, uint32_t u32RepeatCount)
000000  b570              PUSH     {r4-r6,lr}
;;;123    {
;;;124        pdma->DSCT[u32Ch].CTL |= PDMA_DSCT_CTL_STRIDEEN_Msk;
000002  eb001401          ADD      r4,r0,r1,LSL #4
000006  9d04              LDR      r5,[sp,#0x10]
000008  6826              LDR      r6,[r4,#0]
00000a  f4464600          ORR      r6,r6,#0x8000
00000e  6026              STR      r6,[r4,#0]
;;;125        pdma->REPEAT[u32Ch].AICTL =((u32DestInterval)<<16) | (u32SrcInterval);
000010  eb0000c1          ADD      r0,r0,r1,LSL #3
000014  ea434202          ORR      r2,r3,r2,LSL #16
000018  f8c02600          STR      r2,[r0,#0x600]
;;;126        pdma->REPEAT[u32Ch].RCNT = u32RepeatCount;
00001c  f8c05604          STR      r5,[r0,#0x604]
;;;127    }
000020  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.PDMA_SetStride||, CODE, READONLY, ALIGN=1

                  PDMA_SetStride PROC
;;;101     */
;;;102    void PDMA_SetStride(PDMA_T * pdma,uint32_t u32Ch, uint32_t u32DestLen, uint32_t u32SrcLen, uint32_t u32TransCount)
000000  b570              PUSH     {r4-r6,lr}
;;;103    {
;;;104        pdma->DSCT[u32Ch].CTL |= PDMA_DSCT_CTL_STRIDEEN_Msk;
000002  eb001401          ADD      r4,r0,r1,LSL #4
000006  9d04              LDR      r5,[sp,#0x10]
000008  6826              LDR      r6,[r4,#0]
00000a  f4464600          ORR      r6,r6,#0x8000
00000e  6026              STR      r6,[r4,#0]
000010  1e52              SUBS     r2,r2,#1
000012  1e5b              SUBS     r3,r3,#1
;;;105        pdma->STRIDE[u32Ch].ASOCR =((u32DestLen-1)<<16) | (u32SrcLen-1);
000014  eb0000c1          ADD      r0,r0,r1,LSL #3
000018  ea434202          ORR      r2,r3,r2,LSL #16
00001c  f8c02504          STR      r2,[r0,#0x504]
000020  1e6d              SUBS     r5,r5,#1
;;;106        pdma->STRIDE[u32Ch].STCR = u32TransCount-1;
000022  f8c05500          STR      r5,[r0,#0x500]
;;;107    }
000026  bd70              POP      {r4-r6,pc}
;;;108    
                          ENDP


                          AREA ||i.PDMA_SetTimeOut||, CODE, READONLY, ALIGN=1

                  PDMA_SetTimeOut PROC
;;;375     */
;;;376    void PDMA_SetTimeOut(PDMA_T * pdma,uint32_t u32Ch, uint32_t u32OnOff, uint32_t u32TimeOutCnt)
000000  b510              PUSH     {r4,lr}
;;;377    {
000002  b111              CBZ      r1,|L10.10|
;;;378        switch(u32Ch)
000004  2901              CMP      r1,#1
000006  d10c              BNE      |L10.34|
000008  e005              B        |L10.22|
                  |L10.10|
;;;379        {
;;;380        case 0ul:
;;;381            pdma->TOC0_1 = (pdma->TOC0_1 & ~PDMA_TOC0_1_TOC0_Msk) | u32TimeOutCnt;
00000a  f8d04440          LDR      r4,[r0,#0x440]
00000e  f36f040f          BFC      r4,#0,#16
000012  431c              ORRS     r4,r4,r3
;;;382            break;
000014  e003              B        |L10.30|
                  |L10.22|
;;;383        case 1ul:
;;;384            pdma->TOC0_1 = (pdma->TOC0_1 & ~PDMA_TOC0_1_TOC1_Msk) | (u32TimeOutCnt << PDMA_TOC0_1_TOC1_Pos);
000016  f8d04440          LDR      r4,[r0,#0x440]
00001a  f363441f          BFI      r4,r3,#16,#16
                  |L10.30|
00001e  f8c04440          STR      r4,[r0,#0x440]        ;381
                  |L10.34|
000022  2301              MOVS     r3,#1                 ;377
;;;385            break;
;;;386        default:
;;;387            break;
;;;388        }
;;;389    
;;;390        if (u32OnOff)
;;;391            pdma->TOUTEN |= (1 << u32Ch);
000024  408b              LSLS     r3,r3,r1
;;;392        else
;;;393            pdma->TOUTEN &= ~(1 << u32Ch);
000026  f8d01434          LDR      r1,[r0,#0x434]
00002a  b10a              CBZ      r2,|L10.48|
00002c  4319              ORRS     r1,r1,r3              ;391
00002e  e000              B        |L10.50|
                  |L10.48|
000030  4399              BICS     r1,r1,r3
                  |L10.50|
000032  f8c01434          STR      r1,[r0,#0x434]        ;391
;;;394    }
000036  bd10              POP      {r4,pc}
;;;395    
                          ENDP


                          AREA ||i.PDMA_SetTransferAddr||, CODE, READONLY, ALIGN=1

                  PDMA_SetTransferAddr PROC
;;;146     */
;;;147    void PDMA_SetTransferAddr(PDMA_T * pdma,uint32_t u32Ch, uint32_t u32SrcAddr, uint32_t u32SrcCtrl, uint32_t u32DstAddr, uint32_t u32DstCtrl)
000000  b530              PUSH     {r4,r5,lr}
;;;148    {
;;;149        pdma->DSCT[u32Ch].SA = u32SrcAddr;
000002  eb001001          ADD      r0,r0,r1,LSL #4
000006  e9dd4503          LDRD     r4,r5,[sp,#0xc]       ;148
00000a  6042              STR      r2,[r0,#4]
;;;150        pdma->DSCT[u32Ch].DA = u32DstAddr;
00000c  6084              STR      r4,[r0,#8]
;;;151        pdma->DSCT[u32Ch].CTL &= ~(PDMA_DSCT_CTL_SAINC_Msk | PDMA_DSCT_CTL_DAINC_Msk);
00000e  6801              LDR      r1,[r0,#0]
000010  f4216170          BIC      r1,r1,#0xf00
000014  6001              STR      r1,[r0,#0]
;;;152        pdma->DSCT[u32Ch].CTL |= (u32SrcCtrl | u32DstCtrl);
000016  6801              LDR      r1,[r0,#0]
000018  432b              ORRS     r3,r3,r5
00001a  4319              ORRS     r1,r1,r3
00001c  6001              STR      r1,[r0,#0]
;;;153    }
00001e  bd30              POP      {r4,r5,pc}
;;;154    
                          ENDP


                          AREA ||i.PDMA_SetTransferCnt||, CODE, READONLY, ALIGN=2

                  PDMA_SetTransferCnt PROC
;;;82      */
;;;83     void PDMA_SetTransferCnt(PDMA_T * pdma,uint32_t u32Ch, uint32_t u32Width, uint32_t u32TransCount)
000000  b510              PUSH     {r4,lr}
;;;84     {
;;;85         pdma->DSCT[u32Ch].CTL &= ~(PDMA_DSCT_CTL_TXCNT_Msk | PDMA_DSCT_CTL_TXWIDTH_Msk);
000002  eb001001          ADD      r0,r0,r1,LSL #4
000006  6801              LDR      r1,[r0,#0]
000008  f64c74ff          MOV      r4,#0xcfff
00000c  4021              ANDS     r1,r1,r4
00000e  6001              STR      r1,[r0,#0]
;;;86         pdma->DSCT[u32Ch].CTL |= (u32Width | ((u32TransCount - 1UL) << PDMA_DSCT_CTL_TXCNT_Pos));
000010  6801              LDR      r1,[r0,#0]
000012  4c03              LDR      r4,|L12.32|
000014  eb044303          ADD      r3,r4,r3,LSL #16
000018  4313              ORRS     r3,r3,r2
00001a  4319              ORRS     r1,r1,r3
00001c  6001              STR      r1,[r0,#0]
;;;87     }
00001e  bd10              POP      {r4,pc}
;;;88     
                          ENDP

                  |L12.32|
                          DCD      0xffff0000

                          AREA ||i.PDMA_SetTransferMode||, CODE, READONLY, ALIGN=2

                  PDMA_SetTransferMode PROC
;;;234     */
;;;235    void PDMA_SetTransferMode(PDMA_T * pdma,uint32_t u32Ch, uint32_t u32Peripheral, uint32_t u32ScatterEn, uint32_t u32DescAddr)
000000  b530              PUSH     {r4,r5,lr}
;;;236    {
;;;237        u32ChSelect[u32Ch] = u32Peripheral;
000002  4d4d              LDR      r5,|L13.312|
000004  9c03              LDR      r4,[sp,#0xc]
;;;238        switch(u32Ch)
000006  2910              CMP      r1,#0x10
000008  546a              STRB     r2,[r5,r1]            ;237
00000a  d27d              BCS      |L13.264|
00000c  e8dff001          TBB      [pc,r1]
000010  08101720          DCB      0x08,0x10,0x17,0x20
000014  272f363f          DCB      0x27,0x2f,0x36,0x3f
000018  464e555e          DCB      0x46,0x4e,0x55,0x5e
00001c  656d7489          DCB      0x65,0x6d,0x74,0x89
;;;239        {
;;;240        case 0ul:
;;;241            pdma->REQSEL0_3 = (pdma->REQSEL0_3 & ~PDMA_REQSEL0_3_REQSRC0_Msk) | u32Peripheral;
000020  f8d05480          LDR      r5,[r0,#0x480]
000024  f025057f          BIC      r5,r5,#0x7f
000028  4315              ORRS     r5,r5,r2
00002a  f8c05480          STR      r5,[r0,#0x480]
;;;242            break;
00002e  e06b              B        |L13.264|
;;;243        case 1ul:
;;;244            pdma->REQSEL0_3 = (pdma->REQSEL0_3 & ~PDMA_REQSEL0_3_REQSRC1_Msk) | (u32Peripheral << PDMA_REQSEL0_3_REQSRC1_Pos);
000030  f8d05480          LDR      r5,[r0,#0x480]
000034  f42545fe          BIC      r5,r5,#0x7f00
000038  ea452202          ORR      r2,r5,r2,LSL #8
;;;245            break;
00003c  e005              B        |L13.74|
;;;246        case 2ul:
;;;247            pdma->REQSEL0_3 = (pdma->REQSEL0_3 & ~PDMA_REQSEL0_3_REQSRC2_Msk) | (u32Peripheral << PDMA_REQSEL0_3_REQSRC2_Pos);
00003e  f8d05480          LDR      r5,[r0,#0x480]
000042  f42505fe          BIC      r5,r5,#0x7f0000
000046  ea454202          ORR      r2,r5,r2,LSL #16
                  |L13.74|
00004a  f8c02480          STR      r2,[r0,#0x480]        ;244
00004e  e05b              B        |L13.264|
;;;248            break;
;;;249        case 3ul:
;;;250            pdma->REQSEL0_3 = (pdma->REQSEL0_3 & ~PDMA_REQSEL0_3_REQSRC3_Msk) | (u32Peripheral << PDMA_REQSEL0_3_REQSRC3_Pos);
000050  f8d05480          LDR      r5,[r0,#0x480]
000054  f02545fe          BIC      r5,r5,#0x7f000000
000058  ea456202          ORR      r2,r5,r2,LSL #24
;;;251            break;
00005c  e7f5              B        |L13.74|
;;;252        case 4ul:
;;;253            pdma->REQSEL4_7 = (pdma->REQSEL4_7 & ~PDMA_REQSEL4_7_REQSRC4_Msk) | u32Peripheral;
00005e  f8d05484          LDR      r5,[r0,#0x484]
000062  f025057f          BIC      r5,r5,#0x7f
000066  4315              ORRS     r5,r5,r2
000068  f8c05484          STR      r5,[r0,#0x484]
;;;254            break;
00006c  e04c              B        |L13.264|
;;;255        case 5ul:
;;;256            pdma->REQSEL4_7 = (pdma->REQSEL4_7 & ~PDMA_REQSEL4_7_REQSRC5_Msk) | (u32Peripheral << PDMA_REQSEL4_7_REQSRC5_Pos);
00006e  f8d05484          LDR      r5,[r0,#0x484]
000072  f42545fe          BIC      r5,r5,#0x7f00
000076  ea452202          ORR      r2,r5,r2,LSL #8
;;;257            break;
00007a  e005              B        |L13.136|
;;;258        case 6ul:
;;;259            pdma->REQSEL4_7 = (pdma->REQSEL4_7 & ~PDMA_REQSEL4_7_REQSRC6_Msk) | (u32Peripheral << PDMA_REQSEL4_7_REQSRC6_Pos);
00007c  f8d05484          LDR      r5,[r0,#0x484]
000080  f42505fe          BIC      r5,r5,#0x7f0000
000084  ea454202          ORR      r2,r5,r2,LSL #16
                  |L13.136|
000088  f8c02484          STR      r2,[r0,#0x484]        ;256
00008c  e03c              B        |L13.264|
;;;260            break;
;;;261        case 7ul:
;;;262            pdma->REQSEL4_7 = (pdma->REQSEL4_7 & ~PDMA_REQSEL4_7_REQSRC7_Msk) | (u32Peripheral << PDMA_REQSEL4_7_REQSRC7_Pos);
00008e  f8d05484          LDR      r5,[r0,#0x484]
000092  f02545fe          BIC      r5,r5,#0x7f000000
000096  ea456202          ORR      r2,r5,r2,LSL #24
;;;263            break;
00009a  e7f5              B        |L13.136|
;;;264        case 8ul:
;;;265            pdma->REQSEL8_11 = (pdma->REQSEL8_11 & ~PDMA_REQSEL8_11_REQSRC8_Msk) | u32Peripheral;
00009c  f8d05488          LDR      r5,[r0,#0x488]
0000a0  f025057f          BIC      r5,r5,#0x7f
0000a4  4315              ORRS     r5,r5,r2
0000a6  f8c05488          STR      r5,[r0,#0x488]
;;;266            break;
0000aa  e02d              B        |L13.264|
;;;267        case 9ul:
;;;268            pdma->REQSEL8_11 = (pdma->REQSEL8_11 & ~PDMA_REQSEL8_11_REQSRC9_Msk) | (u32Peripheral << PDMA_REQSEL8_11_REQSRC9_Pos);
0000ac  f8d05488          LDR      r5,[r0,#0x488]
0000b0  f42545fe          BIC      r5,r5,#0x7f00
0000b4  ea452202          ORR      r2,r5,r2,LSL #8
;;;269            break;
0000b8  e005              B        |L13.198|
;;;270        case 10ul:
;;;271            pdma->REQSEL8_11 = (pdma->REQSEL8_11 & ~PDMA_REQSEL8_11_REQSRC10_Msk) | (u32Peripheral << PDMA_REQSEL8_11_REQSRC10_Pos);
0000ba  f8d05488          LDR      r5,[r0,#0x488]
0000be  f42505fe          BIC      r5,r5,#0x7f0000
0000c2  ea454202          ORR      r2,r5,r2,LSL #16
                  |L13.198|
0000c6  f8c02488          STR      r2,[r0,#0x488]        ;268
0000ca  e01d              B        |L13.264|
;;;272            break;
;;;273        case 11ul:
;;;274            pdma->REQSEL8_11 = (pdma->REQSEL8_11 & ~PDMA_REQSEL8_11_REQSRC11_Msk) | (u32Peripheral << PDMA_REQSEL8_11_REQSRC11_Pos);
0000cc  f8d05488          LDR      r5,[r0,#0x488]
0000d0  f02545fe          BIC      r5,r5,#0x7f000000
0000d4  ea456202          ORR      r2,r5,r2,LSL #24
;;;275            break;
0000d8  e7f5              B        |L13.198|
;;;276        case 12ul:
;;;277            pdma->REQSEL12_15 = (pdma->REQSEL12_15 & ~PDMA_REQSEL12_15_REQSRC12_Msk) | u32Peripheral;
0000da  f8d0548c          LDR      r5,[r0,#0x48c]
0000de  f025057f          BIC      r5,r5,#0x7f
0000e2  4315              ORRS     r5,r5,r2
0000e4  f8c0548c          STR      r5,[r0,#0x48c]
;;;278            break;
0000e8  e00e              B        |L13.264|
;;;279        case 13ul:
;;;280            pdma->REQSEL12_15 = (pdma->REQSEL12_15 & ~PDMA_REQSEL12_15_REQSRC13_Msk) | (u32Peripheral << PDMA_REQSEL12_15_REQSRC13_Pos);
0000ea  f8d0548c          LDR      r5,[r0,#0x48c]
0000ee  f42545fe          BIC      r5,r5,#0x7f00
0000f2  ea452202          ORR      r2,r5,r2,LSL #8
;;;281            break;
0000f6  e005              B        |L13.260|
;;;282        case 14ul:
;;;283            pdma->REQSEL12_15 = (pdma->REQSEL12_15 & ~PDMA_REQSEL12_15_REQSRC14_Msk) | (u32Peripheral << PDMA_REQSEL12_15_REQSRC14_Pos);
0000f8  f8d0548c          LDR      r5,[r0,#0x48c]
0000fc  f42505fe          BIC      r5,r5,#0x7f0000
000100  ea454202          ORR      r2,r5,r2,LSL #16
                  |L13.260|
000104  f8c0248c          STR      r2,[r0,#0x48c]        ;280
                  |L13.264|
;;;284            break;
;;;285        case 15ul:
;;;286            pdma->REQSEL12_15 = (pdma->REQSEL12_15 & ~PDMA_REQSEL12_15_REQSRC15_Msk) | (u32Peripheral << PDMA_REQSEL12_15_REQSRC15_Pos);
;;;287            break;
;;;288        default:
;;;289            break;
;;;290        }
;;;291    
;;;292        if(u32ScatterEn)
;;;293        {
;;;294            pdma->DSCT[u32Ch].CTL = (pdma->DSCT[u32Ch].CTL & ~PDMA_DSCT_CTL_OPMODE_Msk) | PDMA_OP_SCATTER;
000108  eb001001          ADD      r0,r0,r1,LSL #4
;;;295            pdma->DSCT[u32Ch].NEXT = u32DescAddr - (PDMA->SCATBA);
;;;296        }
;;;297        else
;;;298        {
;;;299            pdma->DSCT[u32Ch].CTL = (pdma->DSCT[u32Ch].CTL & ~PDMA_DSCT_CTL_OPMODE_Msk) | PDMA_OP_BASIC;
00010c  6801              LDR      r1,[r0,#0]
00010e  f0210103          BIC      r1,r1,#3
000112  b16b              CBZ      r3,|L13.304|
000114  1c89              ADDS     r1,r1,#2              ;292
000116  6001              STR      r1,[r0,#0]            ;294
000118  4908              LDR      r1,|L13.316|
00011a  6809              LDR      r1,[r1,#0]            ;295
00011c  1a61              SUBS     r1,r4,r1              ;295
00011e  60c1              STR      r1,[r0,#0xc]          ;295
;;;300        }
;;;301    }
000120  bd30              POP      {r4,r5,pc}
000122  f8d0548c          LDR      r5,[r0,#0x48c]        ;286
000126  f02545fe          BIC      r5,r5,#0x7f000000     ;286
00012a  ea456202          ORR      r2,r5,r2,LSL #24      ;286
00012e  e7e9              B        |L13.260|
                  |L13.304|
000130  1c49              ADDS     r1,r1,#1              ;287
000132  6001              STR      r1,[r0,#0]            ;299
000134  bd30              POP      {r4,r5,pc}
;;;302    
                          ENDP

000136  0000              DCW      0x0000
                  |L13.312|
                          DCD      ||.bss||
                  |L13.316|
                          DCD      0x4000843c

                          AREA ||i.PDMA_Trigger||, CODE, READONLY, ALIGN=2

                  PDMA_Trigger PROC
;;;405     */
;;;406    void PDMA_Trigger(PDMA_T * pdma,uint32_t u32Ch)
000000  4a04              LDR      r2,|L14.20|
;;;407    {
;;;408        if(u32ChSelect[u32Ch] == PDMA_MEM)
000002  5c52              LDRB     r2,[r2,r1]
000004  2a00              CMP      r2,#0                 ;407
000006  d103              BNE      |L14.16|
;;;409        {
;;;410            pdma->SWREQ = (1ul << u32Ch);
000008  2201              MOVS     r2,#1
00000a  408a              LSLS     r2,r2,r1
00000c  f8c02408          STR      r2,[r0,#0x408]
                  |L14.16|
;;;411        }
;;;412        else {}
;;;413    }
000010  4770              BX       lr
;;;414    
                          ENDP

000012  0000              DCW      0x0000
                  |L14.20|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  u32ChSelect
                          %        16

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\pdma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_pdma_c_4711ff23____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_pdma_c_4711ff23____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_pdma_c_4711ff23____REVSH|
#line 402
|__asm___6_pdma_c_4711ff23____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_pdma_c_4711ff23____RRX|
#line 587
|__asm___6_pdma_c_4711ff23____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
