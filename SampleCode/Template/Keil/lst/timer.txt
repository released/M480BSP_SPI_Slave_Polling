; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\timer.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\timer.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DENABLE_SPI_SLAVE --omf_browse=.\obj\timer.crf ..\..\..\Library\StdDriver\src\timer.c]
                          THUMB

                          AREA ||i.TIMER_Close||, CODE, READONLY, ALIGN=1

                  TIMER_Close PROC
;;;73       */
;;;74     void TIMER_Close(TIMER_T *timer)
000000  2100              MOVS     r1,#0
;;;75     {
;;;76         timer->CTL = 0UL;
000002  6001              STR      r1,[r0,#0]
;;;77         timer->EXTCTL = 0UL;
000004  6141              STR      r1,[r0,#0x14]
;;;78     }
000006  4770              BX       lr
;;;79     
                          ENDP


                          AREA ||i.TIMER_Delay||, CODE, READONLY, ALIGN=2

                  TIMER_Delay PROC
;;;91       */
;;;92     void TIMER_Delay(TIMER_T *timer, uint32_t u32Usec)
000000  b570              PUSH     {r4-r6,lr}
;;;93     {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;94         uint32_t u32Clk = TIMER_GetModuleClock(timer);
000006  f7fffffe          BL       TIMER_GetModuleClock
;;;95         uint32_t u32Prescale = 0UL, delay = (SystemCoreClock / u32Clk) + 1UL;
00000a  491b              LDR      r1,|L2.120|
00000c  2200              MOVS     r2,#0
00000e  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
;;;96         uint32_t u32Cmpr, u32NsecPerTick;
;;;97     
;;;98         /* Clear current timer configuration */
;;;99         timer->CTL = 0UL;
000010  602a              STR      r2,[r5,#0]
000012  fbb1f1f0          UDIV     r1,r1,r0              ;95
;;;100        timer->EXTCTL = 0UL;
000016  616a              STR      r2,[r5,#0x14]
;;;101    
;;;102        if(u32Clk <= 1000000UL)   /* min delay is 1000 us if timer clock source is <= 1 MHz */
000018  4b18              LDR      r3,|L2.124|
00001a  1c49              ADDS     r1,r1,#1
00001c  4298              CMP      r0,r3
00001e  d805              BHI      |L2.44|
;;;103        {
;;;104            if(u32Usec < 1000UL)
000020  f44f767a          MOV      r6,#0x3e8
000024  42b4              CMP      r4,r6
000026  d205              BCS      |L2.52|
;;;105            {
;;;106                u32Usec = 1000UL;
000028  4634              MOV      r4,r6
00002a  e006              B        |L2.58|
                  |L2.44|
;;;107            }
;;;108            if(u32Usec > 1000000UL)
;;;109            {
;;;110                u32Usec = 1000000UL;
;;;111            }
;;;112        }
;;;113        else
;;;114        {
;;;115            if(u32Usec < 100UL)
00002c  2c64              CMP      r4,#0x64
00002e  d201              BCS      |L2.52|
;;;116            {
;;;117                u32Usec = 100UL;
000030  2464              MOVS     r4,#0x64
000032  e002              B        |L2.58|
                  |L2.52|
;;;118            }
;;;119            if(u32Usec > 1000000UL)
000034  429c              CMP      r4,r3
000036  d900              BLS      |L2.58|
;;;120            {
;;;121                u32Usec = 1000000UL;
000038  461c              MOV      r4,r3
                  |L2.58|
;;;122            }
;;;123        }
;;;124    
;;;125        if(u32Clk <= 1000000UL)
00003a  4298              CMP      r0,r3
00003c  d808              BHI      |L2.80|
;;;126        {
;;;127            u32Prescale = 0UL;
;;;128            u32NsecPerTick = 1000000000UL / u32Clk;
00003e  4b10              LDR      r3,|L2.128|
000040  fbb3f0f0          UDIV     r0,r3,r0
;;;129            u32Cmpr = (u32Usec * 1000UL) / u32NsecPerTick;
000044  f44f737a          MOV      r3,#0x3e8
000048  435c              MULS     r4,r3,r4
00004a  fbb4f0f0          UDIV     r0,r4,r0
00004e  e007              B        |L2.96|
                  |L2.80|
;;;130        }
;;;131        else
;;;132        {
;;;133            u32Cmpr = u32Usec * (u32Clk / 1000000UL);
000050  fbb0f0f3          UDIV     r0,r0,r3
000054  4360              MULS     r0,r4,r0
;;;134            u32Prescale = (u32Cmpr >> 24);  /* for 24 bits CMPDAT */
000056  0e02              LSRS     r2,r0,#24
;;;135            if (u32Prescale > 0UL)
000058  d002              BEQ      |L2.96|
;;;136                u32Cmpr = u32Cmpr / (u32Prescale + 1UL);
00005a  1c53              ADDS     r3,r2,#1
00005c  fbb0f0f3          UDIV     r0,r0,r3
                  |L2.96|
;;;137        }
;;;138    
;;;139        timer->CMP = u32Cmpr;
000060  6068              STR      r0,[r5,#4]
;;;140        timer->CTL = TIMER_CTL_CNTEN_Msk | TIMER_ONESHOT_MODE | u32Prescale;
000062  f0424080          ORR      r0,r2,#0x40000000
000066  6028              STR      r0,[r5,#0]
;;;141    
;;;142        /* When system clock is faster than timer clock, it is possible timer active bit cannot set in time while we check it.
;;;143           And the while loop below return immediately, so put a tiny delay here allowing timer start counting and raise active flag. */
;;;144        for(; delay > 0UL; delay--)
000068  b111              CBZ      r1,|L2.112|
                  |L2.106|
;;;145        {
;;;146            __NOP();
00006a  bf00              NOP      
00006c  1e49              SUBS     r1,r1,#1
00006e  d1fc              BNE      |L2.106|
                  |L2.112|
;;;147        }
;;;148    
;;;149        while(timer->CTL & TIMER_CTL_ACTSTS_Msk)
000070  6828              LDR      r0,[r5,#0]
000072  0180              LSLS     r0,r0,#6
000074  d4fc              BMI      |L2.112|
;;;150        {
;;;151            ;
;;;152        }
;;;153    }
000076  bd70              POP      {r4-r6,pc}
;;;154    
                          ENDP

                  |L2.120|
                          DCD      SystemCoreClock
                  |L2.124|
                          DCD      0x000f4240
                  |L2.128|
                          DCD      0x3b9aca00

                          AREA ||i.TIMER_DisableCapture||, CODE, READONLY, ALIGN=1

                  TIMER_DisableCapture PROC
;;;188      */
;;;189    void TIMER_DisableCapture(TIMER_T *timer)
000000  6941              LDR      r1,[r0,#0x14]
;;;190    {
;;;191        timer->EXTCTL &= ~TIMER_EXTCTL_CAPEN_Msk;
000002  f0210108          BIC      r1,r1,#8
000006  6141              STR      r1,[r0,#0x14]
;;;192    }
000008  4770              BX       lr
;;;193    
                          ENDP


                          AREA ||i.TIMER_DisableEventCounter||, CODE, READONLY, ALIGN=1

                  TIMER_DisableEventCounter PROC
;;;222      */
;;;223    void TIMER_DisableEventCounter(TIMER_T *timer)
000000  6801              LDR      r1,[r0,#0]
;;;224    {
;;;225        timer->CTL &= ~TIMER_CTL_EXTCNTEN_Msk;
000002  f0217180          BIC      r1,r1,#0x1000000
000006  6001              STR      r1,[r0,#0]
;;;226    }
000008  4770              BX       lr
;;;227    
                          ENDP


                          AREA ||i.TIMER_DisableFreqCounter||, CODE, READONLY, ALIGN=1

                  TIMER_DisableFreqCounter PROC
;;;313      */
;;;314    void TIMER_DisableFreqCounter(TIMER_T *timer)
000000  6801              LDR      r1,[r0,#0]
;;;315    {
;;;316        timer->CTL &= ~TIMER_CTL_INTRGEN_Msk;
000002  f4212100          BIC      r1,r1,#0x80000
000006  6001              STR      r1,[r0,#0]
;;;317    }
000008  4770              BX       lr
;;;318    
                          ENDP


                          AREA ||i.TIMER_EnableCapture||, CODE, READONLY, ALIGN=1

                  TIMER_EnableCapture PROC
;;;173      */
;;;174    void TIMER_EnableCapture(TIMER_T *timer, uint32_t u32CapMode, uint32_t u32Edge)
000000  b510              PUSH     {r4,lr}
;;;175    {
;;;176        timer->EXTCTL = (timer->EXTCTL & ~(TIMER_EXTCTL_CAPFUNCS_Msk | TIMER_EXTCTL_CAPEDGE_Msk)) |
000002  6943              LDR      r3,[r0,#0x14]
000004  f2470410          MOV      r4,#0x7010
000008  43a3              BICS     r3,r3,r4
00000a  430b              ORRS     r3,r3,r1
00000c  4313              ORRS     r3,r3,r2
00000e  f0430108          ORR      r1,r3,#8
000012  6141              STR      r1,[r0,#0x14]
;;;177                        u32CapMode | u32Edge | TIMER_EXTCTL_CAPEN_Msk;
;;;178    }
000014  bd10              POP      {r4,pc}
;;;179    
                          ENDP


                          AREA ||i.TIMER_EnableEventCounter||, CODE, READONLY, ALIGN=1

                  TIMER_EnableEventCounter PROC
;;;207      */
;;;208    void TIMER_EnableEventCounter(TIMER_T *timer, uint32_t u32Edge)
000000  6942              LDR      r2,[r0,#0x14]
;;;209    {
;;;210        timer->EXTCTL = (timer->EXTCTL & ~TIMER_EXTCTL_CNTPHASE_Msk) | u32Edge;
000002  f0220201          BIC      r2,r2,#1
000006  430a              ORRS     r2,r2,r1
000008  6142              STR      r2,[r0,#0x14]
;;;211        timer->CTL |= TIMER_CTL_EXTCNTEN_Msk;
00000a  6801              LDR      r1,[r0,#0]
00000c  f0417180          ORR      r1,r1,#0x1000000
000010  6001              STR      r1,[r0,#0]
;;;212    }
000012  4770              BX       lr
;;;213    
                          ENDP


                          AREA ||i.TIMER_EnableFreqCounter||, CODE, READONLY, ALIGN=2

                  TIMER_EnableFreqCounter PROC
;;;293      */
;;;294    void TIMER_EnableFreqCounter(TIMER_T *timer,
000000  4908              LDR      r1,|L8.36|
;;;295                                 uint32_t u32DropCount,
;;;296                                 uint32_t u32Timeout,
;;;297                                 uint32_t u32EnableInt)
;;;298    {
;;;299        TIMER_T *t;    /* store the timer base to configure compare value */
;;;300    
;;;301        t = (timer == TIMER0) ? TIMER1 : TIMER3;
000002  4288              CMP      r0,r1
000004  d101              BNE      |L8.10|
000006  4908              LDR      r1,|L8.40|
000008  e000              B        |L8.12|
                  |L8.10|
00000a  4908              LDR      r1,|L8.44|
                  |L8.12|
;;;302    
;;;303        t->CMP = 0xFFFFFFUL;
00000c  f06f427f          MVN      r2,#0xff000000
000010  604a              STR      r2,[r1,#4]
;;;304        t->EXTCTL = u32EnableInt ? TIMER_EXTCTL_CAPIEN_Msk : 0UL;
000012  b10b              CBZ      r3,|L8.24|
000014  2220              MOVS     r2,#0x20
000016  e000              B        |L8.26|
                  |L8.24|
000018  2200              MOVS     r2,#0
                  |L8.26|
00001a  614a              STR      r2,[r1,#0x14]
;;;305        timer->CTL = TIMER_CTL_INTRGEN_Msk | TIMER_CTL_CNTEN_Msk;
00001c  4904              LDR      r1,|L8.48|
00001e  6001              STR      r1,[r0,#0]
;;;306    
;;;307        return;
;;;308    }
000020  4770              BX       lr
;;;309    /**
                          ENDP

000022  0000              DCW      0x0000
                  |L8.36|
                          DCD      0x40050000
                  |L8.40|
                          DCD      0x40050100
                  |L8.44|
                          DCD      0x40051100
                  |L8.48|
                          DCD      0x40080000

                          AREA ||i.TIMER_GetModuleClock||, CODE, READONLY, ALIGN=2

                  TIMER_GetModuleClock PROC
;;;237      */
;;;238    uint32_t TIMER_GetModuleClock(TIMER_T *timer)
000000  b510              PUSH     {r4,lr}
;;;239    {
000002  b088              SUB      sp,sp,#0x20
000004  4604              MOV      r4,r0
;;;240        uint32_t u32Src, u32Clk;
;;;241        const uint32_t au32Clk[] = {__HXT, __LXT, 0UL, 0UL, 0UL, __LIRC, 0UL, __HIRC};
000006  2220              MOVS     r2,#0x20
000008  4917              LDR      r1,|L9.104|
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       __aeabi_memcpy4
;;;242    
;;;243        if(timer == TIMER0)
000010  4a16              LDR      r2,|L9.108|
;;;244        {
;;;245            u32Src = (CLK->CLKSEL1 & CLK_CLKSEL1_TMR0SEL_Msk) >> CLK_CLKSEL1_TMR0SEL_Pos;
;;;246        }
;;;247        else if(timer == TIMER1)
000012  4b17              LDR      r3,|L9.112|
000014  0390              LSLS     r0,r2,#14             ;245
000016  4294              CMP      r4,r2                 ;243
000018  d104              BNE      |L9.36|
00001a  f8d00214          LDR      r0,[r0,#0x214]        ;245
00001e  f3c02102          UBFX     r1,r0,#8,#3           ;245
000022  e010              B        |L9.70|
                  |L9.36|
000024  429c              CMP      r4,r3
000026  d104              BNE      |L9.50|
;;;248        {
;;;249            u32Src = (CLK->CLKSEL1 & CLK_CLKSEL1_TMR1SEL_Msk) >> CLK_CLKSEL1_TMR1SEL_Pos;
000028  f8d00214          LDR      r0,[r0,#0x214]
00002c  f3c03102          UBFX     r1,r0,#12,#3
000030  e009              B        |L9.70|
                  |L9.50|
;;;250        }
;;;251        else if(timer == TIMER2)
000032  4910              LDR      r1,|L9.116|
;;;252        {
;;;253            u32Src = (CLK->CLKSEL1 & CLK_CLKSEL1_TMR2SEL_Msk) >> CLK_CLKSEL1_TMR2SEL_Pos;
;;;254        }
;;;255        else      /* Timer 3 */
;;;256        {
;;;257            u32Src = (CLK->CLKSEL1 & CLK_CLKSEL1_TMR3SEL_Msk) >> CLK_CLKSEL1_TMR3SEL_Pos;
000034  f8d00214          LDR      r0,[r0,#0x214]
000038  428c              CMP      r4,r1                 ;251
00003a  d102              BNE      |L9.66|
00003c  f3c04102          UBFX     r1,r0,#16,#3          ;253
000040  e001              B        |L9.70|
                  |L9.66|
000042  f3c05102          UBFX     r1,r0,#20,#3
                  |L9.70|
;;;258        }
;;;259    
;;;260        if(u32Src == 2UL)
000046  2902              CMP      r1,#2
000048  d003              BEQ      |L9.82|
;;;261        {
;;;262            if((timer == TIMER0) || (timer == TIMER1))
;;;263            {
;;;264                u32Clk = CLK_GetPCLK0Freq();
;;;265            }
;;;266            else
;;;267            {
;;;268                u32Clk = CLK_GetPCLK1Freq();
;;;269            }
;;;270        }
;;;271        else
;;;272        {
;;;273            u32Clk = au32Clk[u32Src];
00004a  f85d0021          LDR      r0,[sp,r1,LSL #2]
                  |L9.78|
;;;274        }
;;;275    
;;;276        return u32Clk;
;;;277    }
00004e  b008              ADD      sp,sp,#0x20
000050  bd10              POP      {r4,pc}
                  |L9.82|
000052  4294              CMP      r4,r2                 ;262
000054  d001              BEQ      |L9.90|
000056  429c              CMP      r4,r3                 ;262
000058  d102              BNE      |L9.96|
                  |L9.90|
00005a  f7fffffe          BL       CLK_GetPCLK0Freq
00005e  e7f6              B        |L9.78|
                  |L9.96|
000060  f7fffffe          BL       CLK_GetPCLK1Freq
000064  e7f3              B        |L9.78|
;;;278    
                          ENDP

000066  0000              DCW      0x0000
                  |L9.104|
                          DCD      ||.constdata||
                  |L9.108|
                          DCD      0x40050000
                  |L9.112|
                          DCD      0x40050100
                  |L9.116|
                          DCD      0x40051000

                          AREA ||i.TIMER_Open||, CODE, READONLY, ALIGN=1

                  TIMER_Open PROC
;;;40       */
;;;41     uint32_t TIMER_Open(TIMER_T *timer, uint32_t u32Mode, uint32_t u32Freq)
000000  b570              PUSH     {r4-r6,lr}
;;;42     {
000002  4616              MOV      r6,r2
000004  460d              MOV      r5,r1
000006  4604              MOV      r4,r0
;;;43         uint32_t u32Clk = TIMER_GetModuleClock(timer);
000008  f7fffffe          BL       TIMER_GetModuleClock
;;;44         uint32_t u32Cmpr = 0UL, u32Prescale = 0UL;
00000c  2300              MOVS     r3,#0
;;;45     
;;;46         /* Fastest possible timer working freq is (u32Clk / 2). While cmpr = 2, prescaler = 0. */
;;;47         if(u32Freq > (u32Clk / 2UL))
00000e  ebb60f50          CMP      r6,r0,LSR #1
000012  d901              BLS      |L10.24|
;;;48         {
;;;49             u32Cmpr = 2UL;
000014  2202              MOVS     r2,#2
000016  e006              B        |L10.38|
                  |L10.24|
;;;50         }
;;;51         else
;;;52         {
;;;53             u32Cmpr = u32Clk / u32Freq;
000018  fbb0f2f6          UDIV     r2,r0,r6
;;;54             u32Prescale = (u32Cmpr >> 24);  /* for 24 bits CMPDAT */
00001c  0e13              LSRS     r3,r2,#24
;;;55             if (u32Prescale > 0UL)
00001e  d002              BEQ      |L10.38|
;;;56                 u32Cmpr = u32Cmpr / (u32Prescale + 1UL);
000020  1c59              ADDS     r1,r3,#1
000022  fbb2f2f1          UDIV     r2,r2,r1
                  |L10.38|
;;;57         }
;;;58     
;;;59         timer->CTL = u32Mode | u32Prescale;
000026  431d              ORRS     r5,r5,r3
000028  6025              STR      r5,[r4,#0]
;;;60         timer->CMP = u32Cmpr;
00002a  6062              STR      r2,[r4,#4]
00002c  1c5b              ADDS     r3,r3,#1
;;;61     
;;;62         return(u32Clk / (u32Cmpr * (u32Prescale + 1UL)));
00002e  435a              MULS     r2,r3,r2
000030  fbb0f0f2          UDIV     r0,r0,r2
;;;63     }
000034  bd70              POP      {r4-r6,pc}
;;;64     
                          ENDP


                          AREA ||i.TIMER_SetTriggerSource||, CODE, READONLY, ALIGN=1

                  TIMER_SetTriggerSource PROC
;;;327      */
;;;328    void TIMER_SetTriggerSource(TIMER_T *timer, uint32_t u32Src)
000000  69c2              LDR      r2,[r0,#0x1c]
;;;329    {
;;;330        timer->TRGCTL = (timer->TRGCTL & ~TIMER_TRGCTL_TRGSSEL_Msk) | u32Src;
000002  f0220201          BIC      r2,r2,#1
000006  430a              ORRS     r2,r2,r1
000008  61c2              STR      r2,[r0,#0x1c]
;;;331    }
00000a  4770              BX       lr
;;;332    
                          ENDP


                          AREA ||i.TIMER_SetTriggerTarget||, CODE, READONLY, ALIGN=1

                  TIMER_SetTriggerTarget PROC
;;;342      */
;;;343    void TIMER_SetTriggerTarget(TIMER_T *timer, uint32_t u32Mask)
000000  69c2              LDR      r2,[r0,#0x1c]
;;;344    {
;;;345        timer->TRGCTL = (timer->TRGCTL & ~(TIMER_TRGCTL_TRGEPWM_Msk | TIMER_TRGCTL_TRGDAC_Msk | TIMER_TRGCTL_TRGEADC_Msk | TIMER_TRGCTL_TRGPDMA_Msk)) | u32Mask;
000002  f022021e          BIC      r2,r2,#0x1e
000006  430a              ORRS     r2,r2,r1
000008  61c2              STR      r2,[r0,#0x1c]
;;;346    }
00000a  4770              BX       lr
;;;347    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00b71b00
                          DCD      0x00008000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00002710
                          DCD      0x00000000
                          DCD      0x00b71b00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_5bec749a____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___7_timer_c_5bec749a____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_5bec749a____REVSH|
#line 402
|__asm___7_timer_c_5bec749a____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_5bec749a____RRX|
#line 587
|__asm___7_timer_c_5bec749a____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
